//problem link: https://leetcode.com/problems/min-cost-climbing-stairs/description/
class Solution {
public:
    int solve(int i, vector<int> &cost,vector<int> &dp){
        int n = cost.size();
        if(i<0)return 0;
        if(dp[i]!=-1)return dp[i];
        int first=0,second=0;
        if(i>0)first = cost[i-1]+solve(i-1,cost,dp);
        if(i>1)second = cost[i-2]+solve(i-2,cost,dp);
        return dp[i] = min(first,second);
    }
    int minCostClimbingStairs(vector<int>& cost) {
        int n  = cost.size();
        vector<int> dp(n+1,-1);
        return solve(n,cost,dp);
    }
};
